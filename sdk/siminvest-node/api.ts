/* tslint:disable */
/* eslint-disable */
/**
 * api.siminvest.co.id
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'device_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'phone_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'pin'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject1
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject1
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject1
     */
    'lot'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject1
     */
    'account_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    'stock'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject2
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject2
     */
    'volume'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    'expiry'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    'lot'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    'account_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'stock'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineObject4
     */
    'volume'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'expiry'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    'FailedAttempts'?: number;
    /**
     * 
     * @type {InlineResponse200AccountDetails}
     * @memberof InlineResponse200
     */
    'account_details'?: InlineResponse200AccountDetails;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    'account_id'?: number;
    /**
     * 
     * @type {InlineResponse200BankData}
     * @memberof InlineResponse200
     */
    'bank_data'?: InlineResponse200BankData;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'created_at'?: string;
    /**
     * 
     * @type {InlineResponse200EquityAccount}
     * @memberof InlineResponse200
     */
    'equity_account'?: InlineResponse200EquityAccount;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200
     */
    'equity_completion'?: boolean;
    /**
     * 
     * @type {InlineResponse200FundAccount}
     * @memberof InlineResponse200
     */
    'fund_account'?: InlineResponse200FundAccount;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200
     */
    'fund_completion'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    'ifua_status'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'phone_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'pin'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'risk_profile'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    'risk_profile_code'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {InlineResponse2001Data}
     * @memberof InlineResponse2001
     */
    'data'?: InlineResponse2001Data;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    'status'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010
     */
    'action'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010
     */
    'account'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010
     */
    'stock'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    'volume'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010
     */
    'expiry'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010
     */
    'reference'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20011
     */
    'account_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20011
     */
    'order_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20011
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20011
     */
    'lot'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20011
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011
     */
    'trade_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011
     */
    'trade_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011
     */
    'trade_month_year'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20011
     */
    'fee'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011
     */
    'company_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20011
     */
    'trade_date_month_year'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20011
     */
    'unix_timestamp'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Data
 */
export interface InlineResponse2001Data {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    'account_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    'balance'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    'withdraw_balance'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    'rdn_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    'rdn_bank'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    'bank_account_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    'bank_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    'bank_account_number'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    't0'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    't1'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    't2'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    't3'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    't4'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    't1_interest'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    't2_interest'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    't1_interest_label'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Data
     */
    't2_interest_label'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001Data
     */
    'active_fee'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {InlineResponse2002Data}
     * @memberof InlineResponse2002
     */
    'data'?: InlineResponse2002Data;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Data
 */
export interface InlineResponse2002Data {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Data
     */
    'buying_power'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Data
     */
    'buyopen'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Data
     */
    'cash_balance'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Data
     */
    'earnings'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Data
     */
    'market_value'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Data
     */
    'open'?: number;
    /**
     * 
     * @type {Array<InlineResponse2002DataPortfolio>}
     * @memberof InlineResponse2002Data
     */
    'portfolio'?: Array<InlineResponse2002DataPortfolio>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Data
     */
    'return'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Data
     */
    'sellopen'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002Data
     */
    'total_investment'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2002DataPortfolio
 */
export interface InlineResponse2002DataPortfolio {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'account_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'available_lot'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'average'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'balance_lot'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'buy_price'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002DataPortfolio
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'current_price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'earnings'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'invested_amount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2002DataPortfolio
     */
    'is_enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'lot'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'return'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002DataPortfolio
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003
     */
    'code'?: number;
    /**
     * 
     * @type {Array<InlineResponse2003Data>}
     * @memberof InlineResponse2003
     */
    'data'?: Array<InlineResponse2003Data>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2003
     */
    'is_success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Data
 */
export interface InlineResponse2003Data {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    'company_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Data
     */
    'company_logo_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    'lp'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    'pp'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    'chg'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    'per_chg'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    'vol'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    'val'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    'freq'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2003Data
     */
    'is_enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003Data
     */
    'board_id'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<InlineResponse2004Annual>}
     * @memberof InlineResponse2004
     */
    'annual'?: Array<InlineResponse2004Annual>;
    /**
     * 
     * @type {Array<InlineResponse2004Annual>}
     * @memberof InlineResponse2004
     */
    'quarterly'?: Array<InlineResponse2004Annual>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Annual
 */
export interface InlineResponse2004Annual {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Annual
     */
    'period'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004Annual
     */
    'quarter'?: number;
    /**
     * 
     * @type {Array<InlineResponse2004Variables>}
     * @memberof InlineResponse2004Annual
     */
    'variables'?: Array<InlineResponse2004Variables>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Variable
 */
export interface InlineResponse2004Variable {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Variable
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Variable
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Variables
 */
export interface InlineResponse2004Variables {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Variables
     */
    'group'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004Variables
     */
    'label'?: string;
    /**
     * 
     * @type {Array<InlineResponse2004Variable>}
     * @memberof InlineResponse2004Variables
     */
    'variable'?: Array<InlineResponse2004Variable>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005
     */
    'code'?: number;
    /**
     * 
     * @type {Array<InlineResponse2005Data>}
     * @memberof InlineResponse2005
     */
    'data'?: Array<InlineResponse2005Data>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2005
     */
    'is_success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Component
 */
export interface InlineResponse2005Component {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005Component
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Component
     */
    'label'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005Component
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Data
 */
export interface InlineResponse2005Data {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005Data
     */
    'category_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Data
     */
    'category_label'?: string;
    /**
     * 
     * @type {Array<InlineResponse2005Component>}
     * @memberof InlineResponse2005Data
     */
    'component'?: Array<InlineResponse2005Component>;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    'code'?: number;
    /**
     * 
     * @type {InlineResponse2006Data}
     * @memberof InlineResponse2006
     */
    'data'?: InlineResponse2006Data;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006
     */
    'is_success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2006Data
 */
export interface InlineResponse2006Data {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006Data
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'company_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'company_logo_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'company_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'company_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'company_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'company_phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'company_website'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Data
     */
    'company_fax'?: string;
    /**
     * 
     * @type {Array<InlineResponse2006DataCompanyCommissioners>}
     * @memberof InlineResponse2006Data
     */
    'company_commissioners'?: Array<InlineResponse2006DataCompanyCommissioners>;
    /**
     * 
     * @type {Array<InlineResponse2006DataCompanyCommissioners>}
     * @memberof InlineResponse2006Data
     */
    'company_directors'?: Array<InlineResponse2006DataCompanyCommissioners>;
    /**
     * 
     * @type {Array<InlineResponse2006DataCompanyShareholders>}
     * @memberof InlineResponse2006Data
     */
    'company_shareholders'?: Array<InlineResponse2006DataCompanyShareholders>;
    /**
     * 
     * @type {InlineResponse2006DataCompanyIpo}
     * @memberof InlineResponse2006Data
     */
    'company_ipo'?: InlineResponse2006DataCompanyIpo;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006Data
     */
    'is_enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006Data
     */
    'board_id'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2006DataCompanyCommissioners
 */
export interface InlineResponse2006DataCompanyCommissioners {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006DataCompanyCommissioners
     */
    'position'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006DataCompanyCommissioners
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2006DataCompanyIpo
 */
export interface InlineResponse2006DataCompanyIpo {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006DataCompanyIpo
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006DataCompanyIpo
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006DataCompanyIpo
     */
    'share'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006DataCompanyIpo
     */
    'amount'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2006DataCompanyShareholders
 */
export interface InlineResponse2006DataCompanyShareholders {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006DataCompanyShareholders
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006DataCompanyShareholders
     */
    'share_cnt'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006DataCompanyShareholders
     */
    'share_pct'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2007
     */
    'buying_power'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineResponse2007
     */
    'data'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008
     */
    'action'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008
     */
    'account'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008
     */
    'stock'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    'volume'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008
     */
    'expiry'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008
     */
    'reference'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    'action'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    'account'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    'stock'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2009
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2009
     */
    'volume'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    'board'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    'expiry'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2009
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2009
     */
    'orderno'?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse200AccountDetails
 */
export interface InlineResponse200AccountDetails {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200AccountDetails
     */
    'account_detail_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'account_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'bank_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200AccountDetails
     */
    'dukcapil'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'id_image_path'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'id_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'id_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'npwp_image_path'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'npwp_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'phone_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'rdn_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'selfie_image_path'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'signature_image_path'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200AccountDetails
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200BankData
 */
export interface InlineResponse200BankData {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200BankData
     */
    'account_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200BankData
     */
    'account_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200BankData
     */
    'bank'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200EquityAccount
 */
export interface InlineResponse200EquityAccount {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200EquityAccount
     */
    'account_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'agent'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'branch'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200EquityAccount
     */
    'equity_account_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'equity_client_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200EquityAccount
     */
    'equity_kyc_status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'equity_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'equity_user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'equity_user_password'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'equity_user_pin'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'nik'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'registration_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'session'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'sid'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200EquityAccount
     */
    'stage'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'sub_account'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'user_password'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200EquityAccount
     */
    'user_pin'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200FundAccount
 */
export interface InlineResponse200FundAccount {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200FundAccount
     */
    'account_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200FundAccount
     */
    'cif_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200FundAccount
     */
    'created_at'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200FundAccount
     */
    'first_transaction_status'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200FundAccount
     */
    'fund_account_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200FundAccount
     */
    'fund_session_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200FundAccount
     */
    'fund_user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200FundAccount
     */
    'ifua'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200FundAccount
     */
    'is_aperd'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200FundAccount
     */
    'kyc_status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200FundAccount
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200FundAccount
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {InlineResponse201Data}
     * @memberof InlineResponse201
     */
    'data'?: InlineResponse201Data;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse201
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse201Data
 */
export interface InlineResponse201Data {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201Data
     */
    'access_token'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse201Data
     */
    'account_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201Data
     */
    'cif_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201Data
     */
    'hp'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201Data
     */
    'ktp'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201Data
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201Data
     */
    'nama_nasabah'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201Data
     */
    'session_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201Data
     */
    'user_id'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInWithPhone: async (inlineObject?: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/users/signin/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInWithPhone(inlineObject?: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInWithPhone(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInWithPhone(inlineObject?: InlineObject, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.signInWithPhone(inlineObject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for signInWithPhone operation in AuthApi.
 * @export
 * @interface AuthApiSignInWithPhoneRequest
 */
export interface AuthApiSignInWithPhoneRequest {
    /**
     * 
     * @type {InlineObject}
     * @memberof AuthApiSignInWithPhone
     */
    readonly inlineObject?: InlineObject
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthApiSignInWithPhoneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signInWithPhone(requestParameters: AuthApiSignInWithPhoneRequest = {}, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).signInWithPhone(requestParameters.inlineObject, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StockApi - axios parameter creator
 * @export
 */
export const StockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get stock keystat
         * @param {number} stockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyStat: async (stockId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stockId' is not null or undefined
            assertParamExists('getKeyStat', 'stockId', stockId)
            const localVarPath = `/emerson/v1/stock/{stock_id}/keystat`
                .replace(`{${"stock_id"}}`, encodeURIComponent(String(stockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get stock financial
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockFinancial: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getStockFinancial', 'code', code)
            const localVarPath = `/api/pcs/v2/company/{code}/financial`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockInfo: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('getStockInfo', 'code', code)
            const localVarPath = `/emerson/v1/stock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get stock profile
         * @param {string} stockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockProfile: async (stockId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stockId' is not null or undefined
            assertParamExists('getStockProfile', 'stockId', stockId)
            const localVarPath = `/emerson/v1/stock/{stock_id}`
                .replace(`{${"stock_id"}}`, encodeURIComponent(String(stockId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StockApi - functional programming interface
 * @export
 */
export const StockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StockApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get stock keystat
         * @param {number} stockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeyStat(stockId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKeyStat(stockId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get stock financial
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStockFinancial(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStockFinancial(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStockInfo(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStockInfo(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get stock profile
         * @param {string} stockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStockProfile(stockId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStockProfile(stockId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StockApi - factory interface
 * @export
 */
export const StockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StockApiFp(configuration)
    return {
        /**
         * 
         * @summary Get stock keystat
         * @param {number} stockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeyStat(stockId: number, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.getKeyStat(stockId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get stock financial
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockFinancial(code: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getStockFinancial(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockInfo(code: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getStockInfo(code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get stock profile
         * @param {string} stockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockProfile(stockId: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.getStockProfile(stockId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getKeyStat operation in StockApi.
 * @export
 * @interface StockApiGetKeyStatRequest
 */
export interface StockApiGetKeyStatRequest {
    /**
     * 
     * @type {number}
     * @memberof StockApiGetKeyStat
     */
    readonly stockId: number
}

/**
 * Request parameters for getStockFinancial operation in StockApi.
 * @export
 * @interface StockApiGetStockFinancialRequest
 */
export interface StockApiGetStockFinancialRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiGetStockFinancial
     */
    readonly code: string
}

/**
 * Request parameters for getStockInfo operation in StockApi.
 * @export
 * @interface StockApiGetStockInfoRequest
 */
export interface StockApiGetStockInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiGetStockInfo
     */
    readonly code: string
}

/**
 * Request parameters for getStockProfile operation in StockApi.
 * @export
 * @interface StockApiGetStockProfileRequest
 */
export interface StockApiGetStockProfileRequest {
    /**
     * 
     * @type {string}
     * @memberof StockApiGetStockProfile
     */
    readonly stockId: string
}

/**
 * StockApi - object-oriented interface
 * @export
 * @class StockApi
 * @extends {BaseAPI}
 */
export class StockApi extends BaseAPI {
    /**
     * 
     * @summary Get stock keystat
     * @param {StockApiGetKeyStatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public getKeyStat(requestParameters: StockApiGetKeyStatRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).getKeyStat(requestParameters.stockId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get stock financial
     * @param {StockApiGetStockFinancialRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public getStockFinancial(requestParameters: StockApiGetStockFinancialRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).getStockFinancial(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {StockApiGetStockInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public getStockInfo(requestParameters: StockApiGetStockInfoRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).getStockInfo(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get stock profile
     * @param {StockApiGetStockProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public getStockProfile(requestParameters: StockApiGetStockProfileRequest, options?: AxiosRequestConfig) {
        return StockApiFp(this.configuration).getStockProfile(requestParameters.stockId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TradingApi - axios parameter creator
 * @export
 */
export const TradingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Buy stock
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyStock: async (inlineObject1?: InlineObject1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/oms/equities/buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Buy stock GTC
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyStockGTC: async (inlineObject2?: InlineObject2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/oms/equities/gtc-buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get GTC order list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGTCOrderList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/oms/equities/gtc-orderlist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order list
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderList: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getOrderList', 'accountId', accountId)
            const localVarPath = `/api/v1/oms/equities/orders/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get trading history
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradingHistory: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getTradingHistory', 'accountId', accountId)
            const localVarPath = `/api/v1/oms/equities/history/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sell stock
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellStock: async (inlineObject3?: InlineObject3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/oms/equities/sell`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sell stock
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellStockGTC: async (inlineObject4?: InlineObject4, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/oms/equities/gtc-sell`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradingApi - functional programming interface
 * @export
 */
export const TradingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Buy stock
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buyStock(inlineObject1?: InlineObject1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buyStock(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Buy stock GTC
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buyStockGTC(inlineObject2?: InlineObject2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buyStockGTC(inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get GTC order list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGTCOrderList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGTCOrderList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get order list
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderList(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderList(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get trading history
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTradingHistory(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse20011>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTradingHistory(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sell stock
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellStock(inlineObject3?: InlineObject3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellStock(inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sell stock
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sellStockGTC(inlineObject4?: InlineObject4, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sellStockGTC(inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TradingApi - factory interface
 * @export
 */
export const TradingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradingApiFp(configuration)
    return {
        /**
         * 
         * @summary Buy stock
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyStock(inlineObject1?: InlineObject1, options?: any): AxiosPromise<void> {
            return localVarFp.buyStock(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Buy stock GTC
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyStockGTC(inlineObject2?: InlineObject2, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.buyStockGTC(inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get GTC order list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGTCOrderList(options?: any): AxiosPromise<void> {
            return localVarFp.getGTCOrderList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get order list
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderList(accountId: string, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.getOrderList(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get trading history
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradingHistory(accountId: string, options?: any): AxiosPromise<Array<InlineResponse20011>> {
            return localVarFp.getTradingHistory(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sell stock
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellStock(inlineObject3?: InlineObject3, options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.sellStock(inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sell stock
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sellStockGTC(inlineObject4?: InlineObject4, options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.sellStockGTC(inlineObject4, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for buyStock operation in TradingApi.
 * @export
 * @interface TradingApiBuyStockRequest
 */
export interface TradingApiBuyStockRequest {
    /**
     * 
     * @type {InlineObject1}
     * @memberof TradingApiBuyStock
     */
    readonly inlineObject1?: InlineObject1
}

/**
 * Request parameters for buyStockGTC operation in TradingApi.
 * @export
 * @interface TradingApiBuyStockGTCRequest
 */
export interface TradingApiBuyStockGTCRequest {
    /**
     * 
     * @type {InlineObject2}
     * @memberof TradingApiBuyStockGTC
     */
    readonly inlineObject2?: InlineObject2
}

/**
 * Request parameters for getOrderList operation in TradingApi.
 * @export
 * @interface TradingApiGetOrderListRequest
 */
export interface TradingApiGetOrderListRequest {
    /**
     * 
     * @type {string}
     * @memberof TradingApiGetOrderList
     */
    readonly accountId: string
}

/**
 * Request parameters for getTradingHistory operation in TradingApi.
 * @export
 * @interface TradingApiGetTradingHistoryRequest
 */
export interface TradingApiGetTradingHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof TradingApiGetTradingHistory
     */
    readonly accountId: string
}

/**
 * Request parameters for sellStock operation in TradingApi.
 * @export
 * @interface TradingApiSellStockRequest
 */
export interface TradingApiSellStockRequest {
    /**
     * 
     * @type {InlineObject3}
     * @memberof TradingApiSellStock
     */
    readonly inlineObject3?: InlineObject3
}

/**
 * Request parameters for sellStockGTC operation in TradingApi.
 * @export
 * @interface TradingApiSellStockGTCRequest
 */
export interface TradingApiSellStockGTCRequest {
    /**
     * 
     * @type {InlineObject4}
     * @memberof TradingApiSellStockGTC
     */
    readonly inlineObject4?: InlineObject4
}

/**
 * TradingApi - object-oriented interface
 * @export
 * @class TradingApi
 * @extends {BaseAPI}
 */
export class TradingApi extends BaseAPI {
    /**
     * 
     * @summary Buy stock
     * @param {TradingApiBuyStockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingApi
     */
    public buyStock(requestParameters: TradingApiBuyStockRequest = {}, options?: AxiosRequestConfig) {
        return TradingApiFp(this.configuration).buyStock(requestParameters.inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Buy stock GTC
     * @param {TradingApiBuyStockGTCRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingApi
     */
    public buyStockGTC(requestParameters: TradingApiBuyStockGTCRequest = {}, options?: AxiosRequestConfig) {
        return TradingApiFp(this.configuration).buyStockGTC(requestParameters.inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get GTC order list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingApi
     */
    public getGTCOrderList(options?: AxiosRequestConfig) {
        return TradingApiFp(this.configuration).getGTCOrderList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get order list
     * @param {TradingApiGetOrderListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingApi
     */
    public getOrderList(requestParameters: TradingApiGetOrderListRequest, options?: AxiosRequestConfig) {
        return TradingApiFp(this.configuration).getOrderList(requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get trading history
     * @param {TradingApiGetTradingHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingApi
     */
    public getTradingHistory(requestParameters: TradingApiGetTradingHistoryRequest, options?: AxiosRequestConfig) {
        return TradingApiFp(this.configuration).getTradingHistory(requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sell stock
     * @param {TradingApiSellStockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingApi
     */
    public sellStock(requestParameters: TradingApiSellStockRequest = {}, options?: AxiosRequestConfig) {
        return TradingApiFp(this.configuration).sellStock(requestParameters.inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sell stock
     * @param {TradingApiSellStockGTCRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingApi
     */
    public sellStockGTC(requestParameters: TradingApiSellStockGTCRequest = {}, options?: AxiosRequestConfig) {
        return TradingApiFp(this.configuration).sellStockGTC(requestParameters.inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get portfolio
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolio: async (accountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getPortfolio', 'accountId', accountId)
            const localVarPath = `/api/v1/users/portfolios/equities/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user RDN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRDNInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/rdn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/app/users/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get portfolio
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolio(accountId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolio(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user RDN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRDNInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRDNInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDetail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDetail(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Get portfolio
         * @param {number} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolio(accountId: number, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getPortfolio(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user RDN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRDNInfo(options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getRDNInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user detail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetail(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getUserDetail(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPortfolio operation in UserApi.
 * @export
 * @interface UserApiGetPortfolioRequest
 */
export interface UserApiGetPortfolioRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiGetPortfolio
     */
    readonly accountId: number
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Get portfolio
     * @param {UserApiGetPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getPortfolio(requestParameters: UserApiGetPortfolioRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getPortfolio(requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user RDN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getRDNInfo(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getRDNInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user detail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserDetail(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserDetail(options).then((request) => request(this.axios, this.basePath));
    }
}


